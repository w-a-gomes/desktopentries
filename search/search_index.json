{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"desktopentryparse https://wbin01.github.io/desktopentryparse Python lib to find and provide easy access to desktop files values. Follows the specification from freedesktop.org: www.freedesktop.org/wiki/Specifications/basedir-spec/ No dependencies, just use the standard library. >>> desktop_file = DesktopFile(url='/usr/share/applications/firefox.desktop') >>> desktop_file.content['[Desktop Entry]']['Name'] 'Firefox Web Browser'","title":"Home"},{"location":"#desktopentryparse","text":"https://wbin01.github.io/desktopentryparse Python lib to find and provide easy access to desktop files values. Follows the specification from freedesktop.org: www.freedesktop.org/wiki/Specifications/basedir-spec/ No dependencies, just use the standard library. >>> desktop_file = DesktopFile(url='/usr/share/applications/firefox.desktop') >>> desktop_file.content['[Desktop Entry]']['Name'] 'Firefox Web Browser'","title":"desktopentryparse"},{"location":"about/","text":"Sources https://github.com/wbin01/desktopentryparse","title":"About"},{"location":"about/#sources","text":"https://github.com/wbin01/desktopentryparse","title":"Sources"},{"location":"reference/","text":"Class Reference Definitions overview desktopentryparse.FileLocations() ulrs: list ulrs_by_priority: list file_dirs: list desktopentryparse.DesktopFile(url: str) as_dict: dict url: str FileLocations (class) Properties: files_ulr : list files_ulr_by_priority : list file_dirs : list Locate system desktop entry file paths. Files that contain the '.desktop' extension and are used internally by menus to find applications. Follows the specification from freedesktop.org: www.freedesktop.org/wiki/Specifications/basedir-spec/ >>> file_locations = FileLocations() files_ulr (Property) FileLocations.files_ulr -> list All desktop files ulrs (/path/file.desktop) String list of all desktop file URLs. It may contain files with the same name in different paths. To get valid single files, use \"files_ulr_by_priority\" property. >>> local = desktopentryparse.FileLocations() >>> local.files_ulr ['/home/user/.local/share/applications/jetbrains-pycharm-ce.desktop', '/usr/local/share/applications/vim.desktop', '/usr/share/applications/org.inkscape.Inkscape.desktop', '/usr/share/applications/vlc.desktop', ... ] files_ulr_by_priority (Property) FileLocations.files_ulr_by_priority -> list Desktop files ulrs (/path/file.desktop). String list of all desktop file URLs in order of priority. If there are files with the same name, then user files in \"~/.local/\", will have priority over system files. Likewise, files in \"/usr/local/share\" take precedence over files in \"/usr/share\". >>> local = FileLocations() >>> local.files_ulr_by_priority ['/home/user/.local/share/applications/jetbrains-pycharm-ce.desktop', '/usr/local/share/applications/vim.desktop', '/usr/share/applications/org.inkscape.Inkscape.desktop', '/usr/share/applications/vlc.desktop', '/usr/share/applications/python3.10.desktop', '/home/user/.local/share/flatpak/exports/share/applications/org.gimp.GIMP.desktop', '/var/lib/flatpak/exports/share/applications/com.obsproject.Studio.desktop', '/var/lib/snapd/desktop/applications/ohmygiraffe_ohmygiraffe.desktop', ... ] file_dirs (Property) FileLocations.file_dirs -> list String list of all desktop file paths on the system as per settings in $XDG_DATA_HOME and $XDG_DATA_DIRS of the freedesktop.org spec. >>> local = FileLocations() >>> local.file_dirs ['/home/user/.local/share/applications', '/usr/local/share/applications', '/usr/share/applications', '/home/user/.local/share/flatpak/exports/share/applications', '/var/lib/flatpak/exports/share/applications', '/var/lib/snapd/desktop/applications'] DesktopFile (class) Properties: content : dict url : str Desktop files are files with the extension '.desktop' and are used internally by menus to find applications. This object converts these files into a dictionary to provide easy access to their values. Positional parameters: url : Need a string of a desktop file like: \"/path/file.desktop\" desktop_file = DesktopFile(url='/usr/share/applications/firefox.desktop') content (Property) DesktopFile.content -> dict Contents of a desktop file as a dictionary. >>> desktop_file = DesktopFile(url='/usr/share/applications/firefox.desktop') >>> desktop_file.content['[Desktop Entry]']['Name'] 'Firefox Web Browser' >>> desktop_file.content['[Desktop Entry]']['Type'] 'Application' >>> for key in desktop_file.content.keys(): ... print(key) ... [Desktop Entry] [Desktop Action new - window] [Desktop Action new - private - window] >>> >>> desktop_file.content['[Desktop Action new-window]']['Name'] 'Open a New Window' url (Property) DesktopFile.url -> str The URL used to construct this object, like: \"/path/file.desktop\". >>> desktop_file = DesktopFile(url='/usr/share/applications/firefox.desktop') >>> desktop_file.url '/usr/share/applications/firefox.desktop'","title":"Class Reference"},{"location":"reference/#class-reference","text":"Definitions overview desktopentryparse.FileLocations() ulrs: list ulrs_by_priority: list file_dirs: list desktopentryparse.DesktopFile(url: str) as_dict: dict url: str","title":"Class Reference"},{"location":"reference/#filelocations","text":"(class) Properties: files_ulr : list files_ulr_by_priority : list file_dirs : list Locate system desktop entry file paths. Files that contain the '.desktop' extension and are used internally by menus to find applications. Follows the specification from freedesktop.org: www.freedesktop.org/wiki/Specifications/basedir-spec/ >>> file_locations = FileLocations()","title":"FileLocations"},{"location":"reference/#files_ulr","text":"(Property) FileLocations.files_ulr -> list All desktop files ulrs (/path/file.desktop) String list of all desktop file URLs. It may contain files with the same name in different paths. To get valid single files, use \"files_ulr_by_priority\" property. >>> local = desktopentryparse.FileLocations() >>> local.files_ulr ['/home/user/.local/share/applications/jetbrains-pycharm-ce.desktop', '/usr/local/share/applications/vim.desktop', '/usr/share/applications/org.inkscape.Inkscape.desktop', '/usr/share/applications/vlc.desktop', ... ]","title":"files_ulr"},{"location":"reference/#files_ulr_by_priority","text":"(Property) FileLocations.files_ulr_by_priority -> list Desktop files ulrs (/path/file.desktop). String list of all desktop file URLs in order of priority. If there are files with the same name, then user files in \"~/.local/\", will have priority over system files. Likewise, files in \"/usr/local/share\" take precedence over files in \"/usr/share\". >>> local = FileLocations() >>> local.files_ulr_by_priority ['/home/user/.local/share/applications/jetbrains-pycharm-ce.desktop', '/usr/local/share/applications/vim.desktop', '/usr/share/applications/org.inkscape.Inkscape.desktop', '/usr/share/applications/vlc.desktop', '/usr/share/applications/python3.10.desktop', '/home/user/.local/share/flatpak/exports/share/applications/org.gimp.GIMP.desktop', '/var/lib/flatpak/exports/share/applications/com.obsproject.Studio.desktop', '/var/lib/snapd/desktop/applications/ohmygiraffe_ohmygiraffe.desktop', ... ]","title":"files_ulr_by_priority"},{"location":"reference/#file_dirs","text":"(Property) FileLocations.file_dirs -> list String list of all desktop file paths on the system as per settings in $XDG_DATA_HOME and $XDG_DATA_DIRS of the freedesktop.org spec. >>> local = FileLocations() >>> local.file_dirs ['/home/user/.local/share/applications', '/usr/local/share/applications', '/usr/share/applications', '/home/user/.local/share/flatpak/exports/share/applications', '/var/lib/flatpak/exports/share/applications', '/var/lib/snapd/desktop/applications']","title":"file_dirs"},{"location":"reference/#desktopfile","text":"(class) Properties: content : dict url : str Desktop files are files with the extension '.desktop' and are used internally by menus to find applications. This object converts these files into a dictionary to provide easy access to their values. Positional parameters: url : Need a string of a desktop file like: \"/path/file.desktop\" desktop_file = DesktopFile(url='/usr/share/applications/firefox.desktop')","title":"DesktopFile"},{"location":"reference/#content","text":"(Property) DesktopFile.content -> dict Contents of a desktop file as a dictionary. >>> desktop_file = DesktopFile(url='/usr/share/applications/firefox.desktop') >>> desktop_file.content['[Desktop Entry]']['Name'] 'Firefox Web Browser' >>> desktop_file.content['[Desktop Entry]']['Type'] 'Application' >>> for key in desktop_file.content.keys(): ... print(key) ... [Desktop Entry] [Desktop Action new - window] [Desktop Action new - private - window] >>> >>> desktop_file.content['[Desktop Action new-window]']['Name'] 'Open a New Window'","title":"content"},{"location":"reference/#url","text":"(Property) DesktopFile.url -> str The URL used to construct this object, like: \"/path/file.desktop\". >>> desktop_file = DesktopFile(url='/usr/share/applications/firefox.desktop') >>> desktop_file.url '/usr/share/applications/firefox.desktop'","title":"url"},{"location":"tests/","text":"Tests Download the Git repository and with the terminal enter the project directory. unittest Standard library unit tests can be run as follows python3 -m unittest discover coverage Test coverage can be verified using the \"coverage\" lib. Use pip to install it. pip3 install --upgrade pip pip3 install coverage Then run the unit tests using the \"coverage\" command and then use the \"report\" argument to get the test coverage status. coverage run -m unittest discover coverage report -m","title":"Tests"},{"location":"tests/#tests","text":"Download the Git repository and with the terminal enter the project directory.","title":"Tests"},{"location":"tests/#unittest","text":"Standard library unit tests can be run as follows python3 -m unittest discover","title":"unittest"},{"location":"tests/#coverage","text":"Test coverage can be verified using the \"coverage\" lib. Use pip to install it. pip3 install --upgrade pip pip3 install coverage Then run the unit tests using the \"coverage\" command and then use the \"report\" argument to get the test coverage status. coverage run -m unittest discover coverage report -m","title":"coverage"}]}